'*******************************************************************************
' Copyright (C) 2004 Cognex Corporation
'
' Subject to Cognex Corporation's terms and conditions and license agreement,
' you are authorized to use and modify this source code in any way you find
' useful, provided the Software and/or the modified Software is used solely in
' conjunction with a Cognex Machine Vision System.  Furthermore you acknowledge
' and agree that Cognex has no warranty, obligations or liability for your use
' of the Software.
'*******************************************************************************
' This sample program is designed to illustrate certain VisionPro features or 
' techniques in the simplest way possible. It is not intended as the framework 
' for a complete application. In particular, the sample program may not provide
' proper error handling, event handling, cleanup, repeatability, and other 
' mechanisms that a commercial quality application requires.

' This sample demonstrates how to handle errors that are generated by a VisionPro tool.
' In this example, we will use the PMAlign tool to demonstrate the concept.
'
' For more generic error handling, see samples\Programming\ErrorHandle\Generic sample.
'
' This sample program shows how to handle the following error conditions.
' 1) Pattern Not Trained
' 2) Unable to train model
' 3) No input image to run the PMAlign tool
'
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Implementation
Imports Cognex.VisionPro.ImageFile
Imports Cognex.VisionPro.PMAlign
Imports Cognex.VisionPro.Exceptions
Namespace SampleVisionToolErrorHandle
  Public Class frmToolErrorHandle
    Inherits System.Windows.Forms.Form
#Region "Module Level vars"
#Region " Windows Form Designer generated code "

    Public Sub New()
      MyBase.New()

      'This call is required by the Windows Form Designer.
      InitializeComponent()

      'Add any initialization after the InitializeComponent() call

    End Sub

    'Form overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
      If disposing Then
        If Not (components Is Nothing) Then
          components.Dispose()
        End If
      End If
      MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents lblMessage As System.Windows.Forms.Label
    Friend WithEvents btnPatternNotTrained As System.Windows.Forms.Button
    Friend WithEvents btnTrainModel As System.Windows.Forms.Button
    Friend WithEvents btnNoInputImage As System.Windows.Forms.Button
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
      Me.lblMessage = New System.Windows.Forms.Label
      Me.btnPatternNotTrained = New System.Windows.Forms.Button
      Me.btnTrainModel = New System.Windows.Forms.Button
      Me.btnNoInputImage = New System.Windows.Forms.Button
      Me.SuspendLayout()
      '
      'lblMessage
      '
      Me.lblMessage.Location = New System.Drawing.Point(48, 24)
      Me.lblMessage.Name = "lblMessage"
      Me.lblMessage.Size = New System.Drawing.Size(568, 104)
      Me.lblMessage.TabIndex = 0
      Me.lblMessage.Text = "Press any button to test an error condition"
      '
      'btnPatternNotTrained
      '
      Me.btnPatternNotTrained.Location = New System.Drawing.Point(48, 160)
      Me.btnPatternNotTrained.Name = "btnPatternNotTrained"
      Me.btnPatternNotTrained.Size = New System.Drawing.Size(128, 48)
      Me.btnPatternNotTrained.TabIndex = 1
      Me.btnPatternNotTrained.Text = "Pattern Not Trained"
      '
      'btnTrainModel
      '
      Me.btnTrainModel.Location = New System.Drawing.Point(216, 160)
      Me.btnTrainModel.Name = "btnTrainModel"
      Me.btnTrainModel.Size = New System.Drawing.Size(128, 48)
      Me.btnTrainModel.TabIndex = 2
      Me.btnTrainModel.Text = "Unable To Train Model"
      '
      'btnNoInputImage
      '
      Me.btnNoInputImage.Location = New System.Drawing.Point(368, 160)
      Me.btnNoInputImage.Name = "btnNoInputImage"
      Me.btnNoInputImage.Size = New System.Drawing.Size(112, 48)
      Me.btnNoInputImage.TabIndex = 3
      Me.btnNoInputImage.Text = "No Input Image"
      '
      'frmToolErrorHandle
      '
      Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
      Me.ClientSize = New System.Drawing.Size(656, 266)
      Me.Controls.Add(Me.btnNoInputImage)
      Me.Controls.Add(Me.btnTrainModel)
      Me.Controls.Add(Me.btnPatternNotTrained)
      Me.Controls.Add(Me.lblMessage)
      Me.Name = "frmToolErrorHandle"
      Me.Text = "Show how to handle errors"
      Me.ResumeLayout(False)

    End Sub

#End Region
    Private mTool As CogPMAlignTool
    Private mImageFileTool As CogImageFileTool
#End Region
#Region "Form and Controls Events"
    Private Sub frmToolErrorHandle_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
      On Error GoTo ErrorHandler

      mTool = New CogPMAlignTool
      ' Temporarily create the image file tool to open bracket_std.idb.
      mImageFileTool = New CogImageFileTool

      ' Get VPRO_ROOT from environment which is needed to locate bracket_std.idb.
      Const ImageFileName As String = "/Images/bracket_std.idb"
      Dim strBaseDir As String
      strBaseDir = Environ("VPRO_ROOT")
      If strBaseDir = "" Then
        DisplayErrorAndExit("Required environment variable VPRO_ROOT not set.")
      End If

      ' Load an image and create shapes.
      mImageFileTool.[Operator].Open(strBaseDir & ImageFileName, CogImageFileModeConstants.Read)
      mImageFileTool.Run()
      Exit Sub

ErrorHandler:
      DisplayErrorAndExit("Encountered the following error: " & Err.Description)
    End Sub
    ' Demonstrate how to detect the "pattern not trained" error condition.

    Private Sub btnPatternNotTrained_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPatternNotTrained.Click
      ' The most obvious way to determine whether or not the pattern is trained
      ' is to check for the return value of mTool.Pattern.Trained as shown below
      If mTool.Pattern.Trained Then
        Debug.WriteLine("Pattern is trained")
        ' Add your code here
      End If

      ' If you want to test whether or not the pattern is trained after running the tool,
      ' the following approaches can be used.
      ' First, let's untrain the pattern to create an error condition
      mTool.Pattern.Untrain()
      ' Running the tool causes an error to occur.
      mTool.Run()
      '
      ' There are two ways to determine the run status.
      ' 1. Check for the tool's run status immediately after calling the tool's Run method
      ' 2. Check for the tool's run status within the tool's Change event handler.
      Dim Status As Cognex.VisionPro.ICogRunStatus
      Status = mTool.RunStatus
      ' Cognex Exceptions Can Be Found in Cognex.VisionPro.Exceptions
      If Status.Exception.GetType.ToString = "Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" Then
        ' Not Trained
        lblMessage.Text = "Exception Type: CogOperatorNotTrained"
      End If
    End Sub
    ' This routine will force the tool to generate "Unable to train model" error
    Private Sub btnTrainModel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTrainModel.Click
      Try

        ' We only need the first image
        mTool.Pattern.TrainImage = mImageFileTool.OutputImage
        Dim mRect As New CogRectangle
        mRect.SetXYWidthHeight(10, 10, 2, 2)
        mTool.Pattern.TrainRegion = mRect

        ' We need to trap the train error because when the train fails, the tool does not generate
        ' the RunStatus.

        mTool.Pattern.Train()
      Catch ex As CogPMAlignCanNotTrainException
        lblMessage.Text = "Couldn't Train: " & ex.Message

      Catch ex As Exception
        DisplayErrorAndExit("Encountered the following error: " & ex.Message)
      End Try
    End Sub
    ' This routine will force the PMAlign tool to generate "No Input Image" error.
    Private Sub btnNoInputImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnNoInputImage.Click

      ' We only need the first image
      mTool.Pattern.TrainImage = mImageFileTool.OutputImage
      Dim mRect As New CogRectangle
      mRect.SetXYWidthHeight(100, 100, 100, 100)
      mTool.Pattern.TrainRegion = mRect
      mTool.Pattern.Train()
      ' Run the tool without assigning the input image
      Dim Status As Cognex.VisionPro.ICogRunStatus

      mTool.Run()
      Status = mTool.RunStatus
      ' Cognex Exceptions Can Be Found in Cognex.VisionPro.Exceptions
      ' 

      lblMessage.Text = "Exception Type: " & Status.Exception.Message

    End Sub
    Private Sub frmToolErrorHandle_closed(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Closed
      If Not mTool Is Nothing Then mTool.Dispose()
      If Not mImageFileTool Is Nothing Then mImageFileTool.Dispose()
    End Sub
#End Region
#Region "Module Level Helper Routine"
    ' Displays an error message and then exits the program.
    ' Call this when an unrecoverable error has occurred.
    Private Sub DisplayErrorAndExit(ByVal ErrorMsg As String)
      MessageBox.Show(ErrorMsg & Environment.NewLine & "Press OK to exit.")
      Me.Close()
      End      ' Quit if it is called from Form_Load
    End Sub

#End Region



  End Class
End Namespace